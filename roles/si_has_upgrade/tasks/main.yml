- name: Checking if Upgrade Task was already done
  ansible.builtin.stat:
      path: "{{ temp_dir }}/configtools.done"
  register: upgradedone
- fail:
     msg: Upgrade is already done. Exiting.
  when: upgradedone.stat.exists

- name: Checking if 19c Grid Infra is already setup
  ansible.builtin.stat:
      path: "{{ temp_dir }}/grid.install.done"
  register: installdone

- name: Checking for failed installations
  ansible.builtin.stat:
      path: "{{ grid_home }}/install/patch"
  register: patchfile

- name: Cleaning up failed installations | Grid Home
  ansible.builtin.file:
      path: "{{ grid_home }}"
      state: absent
  when: patchfile.stat.exists

- name: Cleaning up failed installations | podba_temp
  ansible.builtin.file:
      path: "{{ temp_dir }}"
      state: absent
  when: patchfile.stat.exists

- name: Creating Temp Directory
  ansible.builtin.file:
     dest={{ temp_dir }}
     owner={{ grid_user }}
     group={{ grid_group }}
     state=directory
  changed_when: false

- name: Checking if prechecks already run
  ansible.builtin.stat:
   path: "{{ temp_dir }}/prechecks.log"
  register: prech

- name: Check HAS Version
  ansible.builtin.shell: "export ORACLE_HOME={{ grid_home_prev }}; {{ grid_home_prev }}/bin/crsctl query has releaseversion |awk '{print $12}' | sed 's/[][]//g'"
  register: hasversion
  changed_when: false

- name: Getting HAS Version
  ansible.builtin.set_fact:
    has_version: "{{ hasversion.stdout }}"

- name: Copying prechecks.sh
  template:
    src:  prechecks.sh.j2
    dest: "{{ temp_dir }}/prechecks.sh"
    mode: '755'
  when: not prech.stat.exists

- name: Executing prechecks.sh
  ansible.builtin.command: "ksh93 {{ temp_dir }}/prechecks.sh"
  become: yes
  become_user: "{{ grid_user }}"
  register: precheck_out
  when: not prech.stat.exists

- debug: var=precheck_out.stdout_lines
  when: not prech.stat.exists

- name: Copying sw_extract.sh
  template:
    src:  sw_extract.sh.j2
    dest: "{{ temp_dir }}/sw_extract.sh"
    mode: '755'

- name: Execute sw_extract.sh
  ansible.builtin.command: "ksh93 {{ temp_dir }}/sw_extract.sh"
  register: sw_extract_out
  become: yes
  become_user: "{{ grid_user }}"
  changed_when: sw_extract_out.stdout is search('unzipped')

- name: Checking freespace in Grid Install Path
  ansible.builtin.shell: "df -g {{ grid_home }} |tail -1|awk '{print $3}'"
  register: grid_home_freespace
  changed_when: false
  when: not installdone.stat.exists and apply_ru
- fail:
    msg: Insufficient freespace for {{ grid_home }} (85GB freespace required).
  when: grid_home_freespace.stdout|int < 80 and apply_ru

- name: Checking if cluvfy already executed
  ansible.builtin.stat:
   path: "{{ temp_dir }}/grid.install.done"
  register: grid_in

- name: Running Cluvfy
  ansible.builtin.shell: "{{ grid_home }}/runcluvfy.sh stage -pre hacfg -fixup -verbose | grep -i FAILED"
  register: cluvfy_results
  become: yes
  become_user: "{{ grid_user }}"
  tags: runcluvfy
  when: not grid_in.stat.exists
  failed_when: (cluvfy_results.rc not in [0,1])

- debug: var=cluvfy_results.stdout
  when: 
    - not grid_in.stat.exists
    - cluvfy_results is defined and cluvfy_results.stdout_lines | length !=0

- ansible.builtin.pause:
    prompt: runcluvfy.sh resulted in errors. If unzip is already installed and it still reports an error, it can be ignored safely. Press 'C' to continue the play or 'A' to abort.
  when: 
    - not grid_in.stat.exists
    - cluvfy_results is defined and cluvfy_results.stdout_lines | length !=0
- name: Executing rootpre.sh
  shell: "{{ grid_home }}/clone/rootpre.sh"

- name: Copying grid response file
  template:
    src: grid_19c_upgrade.rsp.j2
    dest: "{{ temp_dir }}/{{ response_file }}"
    owner: "{{ grid_user }}"
    group: "{{ grid_group }}"
    mode: '0644'

- name: Copying grid_install.sh
  template:
    src: grid_install.sh.j2
    dest: "{{ temp_dir }}/grid_install.sh"
    owner: "{{ grid_user }}"
    group: "{{ grid_group }}"
    mode: '0755'

- name: Setting Up new 19c Grid for HAS
  ansible.builtin.command: "ksh93 {{ temp_dir }}/grid_install.sh"
  register: new_grid_out
  become: yes
  become_user: "{{ grid_user }}"
- debug: var=new_grid_out.stdout

- name: Checking if rootupgrade is already executed
  ansible.builtin.stat:
   path: "{{ temp_dir }}/rootupgrade.done"
  register: configdone

- name: Stopping database services before Root Upgrade
  ansible.builtin.shell: "export ORACLE_HOME={{ grid_home_prev }} && {{ grid_home_prev }}/bin/srvctl stop database -d {{ item }}"
  register: stop_dbs
  failed_when: (stop_dbs.rc not in [0,1,2])
  with_items:
      - "{{ databases }}"  
  when: not configdone.stat.exists 

- name: Copying grid_upgrade.sh
  template:
    src: grid_upgrade.sh.j2
    dest: "{{ temp_dir }}/grid_upgrade.sh"
    owner: "{{ grid_user }}"
    group: "{{ grid_group }}"
    mode: '0755'    

- name: Executing grid_upgrade.sh
  ansible.builtin.command: "ksh93 {{ temp_dir }}/grid_upgrade.sh"
  register: grid_upgrade_out
- ansible.builtin.debug: var=grid_upgrade_out.stdout

- name: Post Grid Upgrade Steps | Copying config_tools.sh
  template:
    src: config_tools.sh.j2
    dest: "{{ temp_dir }}/config_tools.sh"
    owner: "{{ grid_user }}"
    group: "{{ grid_group }}"
    mode: '0755'

- name: Post Grid Upgrade Steps| Executing Config Tools
  ansible.builtin.command: "ksh93 {{ temp_dir }}/config_tools.sh"
  register: config_tools_out
  become: yes
  become_user: "{{ grid_user }}"
- ansible.builtin.debug: var=config_tools_out.stdout

- name: Post Grid Upgrade Steps| Checking the Grid Services
  ansible.builtin.shell: "export ORACLE_HOME={{ grid_home }} && {{ grid_home }}/bin/crsctl stat res ora.cssd"
  register: check_services
  failed_when: check_services.rc not in [0,1,2]
- ansible.builtin.debug: var=check_services.stdout_lines

- name: Post Grid Upgrade Steps | Starting database services
  ansible.builtin.stat:
   path: "{{ temp_dir }}/configtools.done"
  register: postupgrd

- name: Starting database services
  ansible.builtin.shell: "export ORACLE_HOME={{ grid_home_prev }} && {{ grid_home_prev }}/bin/srvctl start database -d {{ item }}"
  register: start_dbs
  failed_when: (start_dbs.rc not in [0,1,2])
  with_items:
      - "{{ databases }}"
  when: postupgrd.stat.exists
