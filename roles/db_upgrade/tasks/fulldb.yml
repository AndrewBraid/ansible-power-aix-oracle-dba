- block:
   - name: Autoupgrade Full DB | Checking database name in /etc/oratab file
     shell: "grep {{ source_db_name }}:{{ source_db_home }} /etc/oratab |wc -l |sed 's/ //g'"
     register: dboratab
   - fail:
        msg: Database name not found in /etc/oratab. Please recheck.
     when: dboratab.stdout == "0"
   
   - name: Autoupgrade Full DB | Checking status of the Database
     ansible.builtin.shell: "ps -ef|grep pmon|grep -v grep |grep {{ source_db_name }} | wc -l"
     when: source_db_name is defined
     register: dbrun
   - fail:
        msg: Database NOT found, either the Database name provided is wrong or it is not up and running.
     when: dbrun.stdout == "0"
   
   - name: Autoupgrade Full DB | Creating Autoupgrade Stage directory
     ansible.builtin.file:
       path: "{{ oracle_rsp_stage }}"
       state: directory
   
   - name: Autoupgrade Full DB | Generating response file for autoupgrade
     template:
       src=fulldbupgrd.cfg.j2
       dest="{{ oracle_rsp_stage }}/fulldbupgrd.cfg"
       owner="{{ oracle_user }}"
       group="{{ oracle_group }}"
       mode=744
       backup=no
  when: full_upgrade
  tags: predbupgrade

- block:
  - name: Autoupgrade Full DB | Analyze
    shell: "{{ jdk_home }}/java -jar {{ autoupgrade_stage }}/autoupgrade.jar -config {{ oracle_rsp_stage }}/fulldbupgrd.cfg -mode analyze -noconsole"
    environment: "{{ env }}"
    become: yes
    become_user: "{{ oracle_user }}"
    register: analyze
  - debug:
      var: analyze.stdout_lines
  - debug:
      msg: Review the specific job number logfiles of Autoupgrade analyze task under {{ log_dir }}/{{ source_db_name }} and take appropriate action before continuing. Fix any errors and follow the recommendations reported in the logs and rerun this playbook, once all the errors are fixed proceed with the upgrade using --tags deploy.
  when: full_upgrade
  tags: analyze

- block:
  - name: Autoupgrade Full DB | Deploy
    shell: "{{ jdk_home }}/java -jar {{ autoupgrade_stage }}/autoupgrade.jar -config {{ oracle_rsp_stage }}/fulldbupgrd.cfg -mode deploy -noconsole"
    environment: "{{ env }}"
    become: yes
    become_user: "{{ oracle_user }}" 
    register: deploy
  - debug:
      var: deploy.stdout_lines
  when: full_upgrade
  tags: deploy
