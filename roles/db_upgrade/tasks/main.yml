- block:
   - name: Creating Temp Directory | {{ temp_dir }}
     ansible.builtin.file:
        dest={{ temp_dir }}/{{ item }}
        owner={{ db_oracle_user }}
        group={{ db_oinstall_group }}
        state=directory
     with_items:
       - scripts
     changed_when: false
     tags: cdir
   - name: Autoupgrade Full DB | Checking source database name in /etc/oratab file
     shell: "grep {{ item.source_db_name }}:{{ item.source_db_home }} /etc/oratab |wc -l |sed 's/ //g'"
     register: dboratab
     with_items:
          - "{{ databases }}"
   - name: Fail if source database name doesn't exist in oratab file.
     fail:
        msg: Source Database name not found in /etc/oratab. Please recheck.
     when: item.stdout|trim == "0"
     loop: "{{ dboratab.results }}"

   - name: Autoupgrade Full DB | Checking the status of the Source Database
     ansible.builtin.shell: "ps -ef|grep pmon|grep -v grep |grep -w ora_pmon_{{ item.source_db_name }} | wc -l"
     register: dbrun
     with_items:
          - "{{ databases }}"
   - name: Fail if database is not up.
     fail:
        msg: Source Database NOT running, either the Database name provided is wrong or it is not up.
     when: item.stdout|trim == "0"
     loop: "{{ dbrun.results }}"

   - name: Autoupgrade Full DB | Checking target database name in /etc/oratab file
     shell: "grep {{ item.target_cdb_name }}:{{ item.target_db_home }} /etc/oratab |wc -l |sed 's/ //g'"
     register: cdboratab
     with_items:
          - "{{ databases }}"
     when: item.target_cdb_name is defined

   - name: Fail if Target database name doesn't exist in oratab file.
     fail:
        msg: Target Container Database name not found in /etc/oratab. Please recheck.
     loop: "{{ cdboratab.results }}"
     when: item.item.target_cdb_name is defined and item.item.target_cdb_name != None and item.stdout|trim == "0"

   - name: Autoupgrade Full DB | Checking the status of the Target Container Database
     ansible.builtin.shell: "ps -ef|grep pmon|grep -v grep |grep -w ora_pmon_{{ item.target_cdb_name }} | wc -l"
     register: cdbrun
     when: item.target_cdb_name is defined
     with_items:
          - "{{ databases }}"
   - debug: msg="{{ cdbrun.results }}"
   - name: Fail if Target database is not up.
     fail:
        msg: Target Database NOT running, either the Database name provided is wrong or it is not up.
     when: item.item.target_cdb_name is defined and item.item.target_cdb_name != None and item.stdout|trim == "0"
     loop: "{{ cdbrun.results }}"

   - name: Autoupgrade Full DB | Generating response file for autoupgrade
     template:
       src=fulldbupgrd.cfg.j2
       dest="{{ temp_dir }}/scripts/fulldbupgrd.cfg"
       owner="{{ db_oracle_user }}"
       group="{{ db_oinstall_group }}"
       mode=744
       backup=no
       force=yes
     with_items:
          - "{{ databases }}"
     tags: respfile
  tags: predbupgrade
- block:
  - name: Autoupgrade Full DB | Analyze mode
    shell: "{{ item.target_db_home }}/jdk/bin/java -jar {{ autoupgrade_stage }}/autoupgrade.jar -config {{ temp_dir }}/scripts/fulldbupgrd.cfg -mode analyze -noconsole"
    become: yes
    become_user: "{{ db_oracle_user }}"
    with_items:
         - "{{ databases | first }}"
    register: analyze
  - debug:
      var: analyze.results[0].stdout_lines
  tags: analyze

- block:
  - name: Autoupgrade Full DB | Deploy mode
    shell: "{{ item.target_db_home }}/jdk/bin/java -jar {{ autoupgrade_stage }}/autoupgrade.jar -config {{ temp_dir }}/scripts/fulldbupgrd.cfg -mode deploy -noconsole"
    become: yes
    become_user: "{{ db_oracle_user }}" 
    with_items:
         - "{{ databases | first }}"
    register: deploy
  - debug:
      var: deploy.results[0].stdout_lines

  - name: State of the DBs
    ansible.builtin.shell: "export ORACLE_HOME={{ grid_home }} && {{ grid_home }}/bin/srvctl status database -d {{ item.source_db_name }}"
    become: yes
    become_user: "{{ grid_user }}"
    with_items:
      - "{{ databases }}"
    ignore_errors: True
    register: state_db
  - ansible.builtin.debug: msg="item.item={{ item.item.source_db_name }}, item.stdout={{ item.stdout }}"
    with_items: "{{ state_db.results }}"
  tags: deploy
