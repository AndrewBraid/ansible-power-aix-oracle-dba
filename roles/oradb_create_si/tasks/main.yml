---
#  - name: set fact
#    set_fact:
#    create_listener: "{{ create_listener }}"
#    with_items: "{{ oracle_databases }}"
#    tags: set_fact

  - name: Create Stage directory for response file.
    ansible.builtin.file:
      path: "{{ oracle_rsp_stage }}"
      state: directory

#  - include: listener.yml
#    when: create_listener
#    tags: listener

  - name: Check if database is already created
    shell: grep {{ oracle_db_name }}:{{ oracle_home_db }} /etc/oratab |wc -l
    when: oracle_db_name is defined
    tags:
    - checkifdbexists
    register: checkdbexist

  - name: Copy custom dbca Templates to ORACLE_HOME/assistants/dbca/templates
    template: src={{ dbca_templatename }} dest={{ oracle_home_db }}/assistants/dbca/templates/{{ dbca_templatename }} owner={{ oracle_user }} group={{ oracle_group }} mode=640
    when: dbca_templatename is defined and dbca_templatename not in('New_Database.dbt','General_Purpose.dbc')
    tags:
      - customdbcatemplate

  - name: Create responsefile for dbca
    template: src=dbca-create-db.rsp.{{oracle_version_db}}.j2 dest={{ oracle_rsp_stage }}/{{ oracle_dbca_rsp }}  owner={{ oracle_user }} group={{ oracle_group }} mode=600 backup=no
    #debug: var=msg
#    with_together:
#       - "{{oracle_databases}}"
#       - "{{checkdbexist.results}}"
    run_once: "{{ configure_cluster}}"
#    when: checkdbexist.stdout != "1"
    tags:
    - dbcaresponse

  - name: Create database(s)
    shell: "time {{ oracle_home_db }}/bin/dbca -createDatabase -responseFile {{ oracle_rsp_stage }}/{{ oracle_dbca_rsp }} -silent -redoLogFileSize {{ redolog_size_in_mb }} {{ dbca_initParams }}"
#    with_together:
#       - "{{oracle_databases}}"
#       - "{{checkdbexist.results}}"
    become_user: "{{ oracle_user }}"
#    run_once: "{{ configure_cluster}}"
#   when: checkdbexist.stdout != "1" and dbcaresponse.state |upper == "PRESENT"
    tags:
      - oradbcreate
    register: oradbcreate

#  - debug: var=item
#    with_items:
#         - "{{ oradbcreate.results|map(attribute='stdout_lines')|list }}"
#    run_once: "{{ configure_cluster}}"
#    tags:
#     - oradbcreate
#    when: oradbcreate.changed
#    ignore_errors: true

  - name: Add dotprofile (1)
    shell:  ps -ef | grep -w "ora_pmon_{{ oracle_db_name }}" |grep -v grep | sed 's/^.*pmon_//g'
#    with_items: "{{oracle_databases}}"
    register: dbs
    changed_when: False
    tags:
      - dotprofile_db
      - update_oratab

  - name: Add dotprofile (2)
    template: src=dotprofile-db.j2 dest={{ oracle_user_home }}/.profile_{{ oracle_db_name }} owner={{ oracle_user }} group={{ oracle_group }} mode=775 backup=yes
#    with_together:
#    - "{{oracle_databases}}"
#    - "{{dbs.results}}"
    tags: dotprofile_db

#  - name: Update oratab
#    lineinfile: dest=/etc/oratab line="{{ item.1.stdout }}:{{ oracle_home_db }}:N" state=present
#    with_together:
#    - "{{oracle_databases}}"
#    - "{{dbs.results}}"
#    when: oracle_db_type != "SI"
#    tags: update_oratab

#  - name: Customize oratab for autostart
#    lineinfile: dest=/etc/oratab line="{{ item.oracle_db_name }}:{{ oracle_home_db }}:Y" state=present
#    with_items:
#         - "{{ oracle_databases }}"
#    when: autostartup_service
#    tags: update_oratab

#  - name: Customize oratab for autostart
#    lineinfile: dest=/etc/oratab line="{{ item.oracle_db_name }}:{{ oracle_home_db }}:N" state=absent
#    with_items:
#         - "{{ oracle_databases }}"
#    when: autostartup_service
#    tags: update_oratab

  - name: Check if database is running
    shell: ps -ef |grep pmon |grep -v grep
    tags:
     - psout
    register: psout
    ignore_errors: true

  - debug: var=psout.stdout_lines
    tags:
     - psout
