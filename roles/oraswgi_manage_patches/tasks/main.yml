- name: gi-opatch | check if GI has been configured
  stat: path=/etc/oracle/olr.loc
  register: olrloc

- name: gi-opatch | set fact for patch_before_rootsh
  set_fact:
      patch_before_rootsh: False
  when: olrloc.stat.exists and patch_before_rootsh

- name: gi-opatch | Check current opatch version
  oracle_opatch:
         oracle_home={{ oracle_home_gi }}
         state=opatchversion
  register: current_opatch_version
  tags: current_opatch_version

- name: gi-opatch | Create patch-base directory (version specific)
  file:
     dest={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}
     mode=777
     owner={{ grid_install_user }}
     group={{ oracle_group }}
     state=directory
  tags:
    - directories

- name: include transfer-files.yml
  include: transfer-files.yml
  when: oracle_sw_copy

- name: include unpack-files.yml
  include: unpack-files.yml
  when: oracle_sw_unpack and apply_patches_gi

- name: include opatch-upgrade.yml
  include: opatch-upgrade.yml
  when: apply_patches_gi

- name: gi-opatch | Configure ocm.rsp (1)
  template:
       src=ocmrsp.expect.j2
       dest={{ oracle_patch_stage }}/{{ oracle_install_version_gi }}/ocmrsp.expect
       mode=0777
       force=yes
  when: apply_patches_gi and current_opatch_version is defined and current_opatch_version.msg is version_compare('12.2.0.1.5', '<')
  become: yes
  become_user: "{{ grid_install_user }}"
  tags:
    - ocmconfig

- name: gi-opatch | Configure ocm.rsp (2)
  shell: "{{ oracle_patch_stage }}/{{ oracle_install_version_gi }}/ocmrsp.expect"
  when: apply_patches_gi and current_opatch_version is defined and current_opatch_version.msg is version_compare('12.2.0.1.5', '<')
  become: yes
  become_user: "{{ grid_install_user }}"
  changed_when: False
  tags:
    - ocmconfig

- name: gi-opatch | Manage opatchauto patches for GI (after software only install)
  oracle_opatch:
    oracle_home={{ oracle_home_gi }}
      patch_base={{ oracle_patch_install }}/{{ oracle_install_version_gi}}/{{ item.0.path | default (item.0.patchid)}}/{{ item.1}}
      patch_id={{item.1}}
      patch_version={{ item.1.patchversion |default(omit)}}
      opatchauto=False
      conflict_check=True
      ocm_response_file={{ ocm_response_file | default(omit)}}
      output=verbose
      state={{ item.0.state }}
  with_subelements:
     - "{{gi_patches[oracle_install_version_gi]['opatchauto']}}"
     - subpatches
  become: yes
  become_user: "{{ grid_install_user }}"
  tags:
    - apply_psu_grid
  when: apply_patches_gi and gi_patches is defined and gi_patches[oracle_install_version_gi] is defined and gi_patches[oracle_install_version_gi]['opatchauto'] is defined and patch_before_rootsh and not olrloc.stat.exists
  register: psuapplym

- name: gi-opatch | Manage opatchauto patches for GI
  oracle_opatch:
      oracle_home={{ oracle_home_gi }}
      patch_base={{ oracle_patch_install }}/{{ oracle_install_version_gi}}/{{ item.path | default (item.patchid)}}/
      patch_id={{item.patchid}}
      patch_version={{ item.patchversion |default(omit)}}
      opatchauto=True
      rolling={{item.rolling | default(True)}}
      conflict_check=True
      ocm_response_file={{ ocm_response_file | default(omit)}}
      output=verbose
      state={{ item.state }}
  with_items:
     - "{{gi_patches[oracle_install_version_gi]['opatchauto']}}"
  tags:
    - apply_psu_grid
  when: apply_patches_gi and gi_patches is defined and gi_patches[oracle_install_version_gi] is defined and gi_patches[oracle_install_version_gi]['opatchauto'] is defined and not patch_before_rootsh and olrloc.stat.exists
  register: psuapplym

- name: gi-opatch | Manage non opatchauto patches for GI
  oracle_opatch:
      oracle_home={{ oracle_home_gi }}
      patch_base={{ oracle_patch_install }}/{{ oracle_install_version_gi}}/{{ item.path | default (item.patchid)}}/
      patch_id={{item.patchid}}
      patch_version={{ item.patchversion |default(omit)}}
      opatchauto=False
      conflict_check=True
      ocm_response_file={{ ocm_response_file | default(omit)}}
      output=verbose
      state={{ item.state }}
  with_items:
     - "{{gi_patches[oracle_install_version_gi]['opatch']}}"
  become: yes
  become_user: "{{ grid_install_user }}"
  tags:
    - apply_psu_grid
  when: apply_patches_gi and gi_patches is defined and gi_patches[oracle_install_version_gi] is defined and gi_patches[oracle_install_version_gi]['opatch'] is defined and patch_before_rootsh and not olrloc.stat.exists
  register: psuapplym
